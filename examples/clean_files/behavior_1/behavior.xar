<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="random" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="158" y="19">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        import random
        self.rnds = []


    def onInput_onStart(self):
        import random
        #self.rnds =[random.randint(0,7) for i in range(10)]
        #self.output(self.rnds)
        self.rand=random.random()
        if self.rand < 0.5:
            self.logger.info(self.rand)
            self.output1(random.randint(0,3))
        else:
            self.output2(random.randint(0,3))

        #self.logger.debug(self.rnds)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="output2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        </Box>
                        <Box name="hello" id="2" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="331" y="21">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " Hello ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="bye bye" id="4" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="331" y="120">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " Hello ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="sends email to me" id="3" localization="8" tooltip="Send an e-mail. Set all parameters of this e-mail before sending it.&#x0A;&#x0A;!!Warning!! The Password has to be hardcoded inside the behavior, and will not&#x0A;be encrypted or hidden. You should create an e-mail account for your robot, that&#x0A;uses a password that you are comfortable to leave un-encrypted." x="729" y="321">
                            <bitmap>media/images/box/internet/email.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import sys, os
import smtplib, email

def mail(email_user, to, subject, text, attach, email_pwd, smtp, port):
  msg = email.MIMEMultipart.MIMEMultipart()
  msg['From'] = email_user
  msg['To'] = to
  msg['Subject'] = subject

  msg.attach(email.MIMEText.MIMEText(text))

  if attach:
     part = email.MIMEBase.MIMEBase('application', 'octet-stream')
     part.set_payload(open(attach, 'rb').read())
     email.Encoders.encode_base64(part)
     part.add_header('Content-Disposition',
             'attachment; filename="%s"' % os.path.basename(attach))
     msg.attach(part)

  if( port != "" ):
      mailServer = smtplib.SMTP(smtp, port)
  else:
      mailServer = smtplib.SMTP(smtp)
  mailServer.ehlo()
  mailServer.starttls()
  mailServer.ehlo()
  mailServer.login(email_user, email_pwd)
  mailServer.sendmail(email_user, to, msg.as_string())

  mailServer.close()

class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self, False)

  def onLoad(self):
    pass

  def onUnload(self):
    #puts code for box cleanup here
    pass

  def onInput_onSend(self):
    sEmailUser = self.getParameter("From")
    aTo = self.getParameter("To").split(";")
    sSubject = self.getParameter("Subject")
    sText = self.getParameter("Contents")
    sAttachedFilePath = self.getParameter("Attachment")
    sPwd = self.getParameter("Password")
    sSmtp = self.getParameter("SMTP address")
    sPort = int( self.getParameter("Port number") )
    try:
        sPort = int( sPort )
        bValidPort = ( sPort >= 0 and sPort <= 65535 )
    except:
        bValidPort = False
    if( not bValidPort ):
        raise Exception( str(sPort) + " is not a valid port number to use to send e-mail. It must be an integer between 0 and 65535. Please check that the port parameter of the box is correct." )
    for address in aTo:
      try:
        mail(
          sEmailUser,
          address,
          sSubject,
          sText,
          sAttachedFilePath,
          sPwd,
          sSmtp,
          sPort)
      except smtplib.SMTPAuthenticationError as e:
        raise(Exception("Authentication error, server answered : [%s] %s" % (e.smtp_code, e.smtp_error)))


    self.onSent() # activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSend" type="1" type_size="1" nature="1" inner="0" tooltip="Send the e-mail." id="2" />
                            <Output name="onSent" type="1" type_size="1" nature="2" inner="0" tooltip="E-mail sent." id="3" />
                            <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Parameter name="From" inherits_from_parent="0" content_type="3" value="ysshski@gmail.com" default_value="myemail@email.com" custom_choice="0" tooltip="E-mail address of the sender." id="5" />
                            <Parameter name="Password" inherits_from_parent="0" content_type="3" value="minomusi1101" default_value="" custom_choice="0" password="1" tooltip="Password of your e-mail account." id="6" />
                            <Parameter name="To" inherits_from_parent="0" content_type="3" value="ysshski@gmail.com" default_value="to@email.com" custom_choice="0" tooltip="Receiver(s) of the e-mail. Separate e-mail addresses by &apos;;&apos;." id="7" />
                            <Parameter name="Subject" inherits_from_parent="0" content_type="3" value="pepper test" default_value="" custom_choice="0" tooltip="Subject of the e-mail." id="8" />
                            <Parameter name="Contents" inherits_from_parent="0" content_type="3" value="test" default_value="" custom_choice="0" tooltip="Contents of the e-mail." id="9" />
                            <Parameter name="Attachment" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="Attachment path." id="10" />
                            <Parameter name="SMTP address" inherits_from_parent="0" content_type="3" value="smtp.gmail.com" default_value="smtp.email.com" custom_choice="0" tooltip="SMTP server this box is supposed to use." id="11" />
                            <Parameter name="Port number" inherits_from_parent="0" content_type="3" value="587" default_value="587" custom_choice="1" tooltip="Port of the server to use.&#x0A;&#x0A;Note: For example, for a gmail address to use TLS/STARTTLS you need to set the&#x0A;port to 587, and to use SSL you need to set it to 465." id="12">
                                <Choice value="587" />
                                <Choice value="465" />
                            </Parameter>
                        </Box>
                        <Box name="Tactile Head" id="5" localization="8" tooltip="Detect touch on head tactile sensor." x="70" y="272">
                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Tactile L.Hand" id="6" localization="8" tooltip="Detect touch on left hand tactile sensor." x="76" y="371">
                            <bitmap>media/images/box/movement/move_leftarm.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="HLLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftLeftTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="HLBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftBackTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="HLRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftRightTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="leftTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The left of the left hand was touched." id="8" />
                            <Output name="backTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The back of the left hand was touched." id="9" />
                            <Output name="rightTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The right of the left hand was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="if &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="142">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="if &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="39">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="if &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="171" y="246">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Left arm-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Tactile R.Hand" id="7" localization="8" tooltip="Detect touch on right hand tactile sensor." x="77" y="478">
                            <bitmap>media/images/box/movement/move_arm.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="HRLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightLeftTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="HRBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightBackTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="HRRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightRightTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="leftTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The left of the right hand was touched." id="8" />
                            <Output name="backTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The back of the right hand was touched." id="9" />
                            <Output name="rightTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The right of the right hand was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="if &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="130">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="if &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="28">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="if &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="232">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Right arm-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="high five" id="10" localization="-1" tooltip="This box makes the robot point to a desired position." x="727" y="217">
                            <bitmap>media/images/box/movement/move_arm.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )

        self.x = 0.0
        self.y = 0.0
        self.z = 0.0

        self.maxSpeed = 0.5

        self.effector = "Arms"

        self.frame = 0 #FRAME TORSO

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.x = self.getParameter("X (m)")
        self.y = self.getParameter("Y (m)")
        self.z = self.getParameter("Z (m)")

        self.maxSpeed = self.getParameter("Speed (%)") / 100.0
        self.effector = self.getParameter("Effector")

        frameStr = self.getParameter("Frame")
        if frameStr == "Torso":
            self.frame = 0
        elif frameStr == "World":
            self.frame = 1
        elif frameStr == "Robot":
            self.frame = 2

        self.tracker.pointAt(self.effector, [self.x, self.y, self.z], self.frame, self.maxSpeed)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        pass

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if (parameterName == "X (m)"):
            self.x = newValue
            self.tracker.pointAt(self.effector, [self.x, self.y, self.z], self.frame, self.maxSpeed)
            self.onStopped()
            return

        if (parameterName == "Y (m)"):
            self.y = newValue
            self.tracker.pointAt(self.effector, [self.x, self.y, self.z], self.frame, self.maxSpeed)
            self.onStopped()
            return

        if (parameterName == "Z (m)"):
            self.z = newValue
            self.tracker.pointAt(self.effector, [self.x, self.y, self.z], self.frame, self.maxSpeed)
            self.onStopped()
            return

        if (parameterName == "Speed (%)"):
            self.maxSpeed = newValue / 100.0
            return

        if (parameterName == "Effector"):
            self.effector = newValue
            self.tracker.pointAt(self.effector, [self.x, self.y, self.z], self.frame, self.maxSpeed)
            self.onStopped()
            return

        if (parameterName == "Frame"):
            if(newValue == "Torso"):
                self.frame = 0
            elif newValue == "World":
                self.frame = 1
            elif newValue == "Robot":
                self.frame = 2]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="X (m)" inherits_from_parent="0" content_type="2" value="6.71266" default_value="1" min="0.001" max="10" tooltip="X coordinate of the target to point at." id="5" />
                            <Parameter name="Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Y coordinate of the target to point at." id="6" />
                            <Parameter name="Z (m)" inherits_from_parent="0" content_type="2" value="10" default_value="0" min="-10" max="10" tooltip="Z coordinate of the target to point at." id="7" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="50" min="1" max="100" tooltip="Speed to look at the desired position" id="8" />
                            <Parameter name="Effector" inherits_from_parent="0" content_type="3" value="LArm" default_value="Arms" custom_choice="0" tooltip="Effector to use" id="9">
                                <Choice value="Arms" />
                                <Choice value="LArm" />
                                <Choice value="RArm" />
                            </Parameter>
                            <Parameter name="Frame" inherits_from_parent="0" content_type="3" value="World" default_value="Torso" custom_choice="0" tooltip="Select the frame of target." id="10">
                                <Choice value="Torso" />
                                <Choice value="World" />
                                <Choice value="Robot" />
                            </Parameter>
                        </Box>
                        <Box name="Only Once" id="8" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="559" y="22">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                            <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                        </Box>
                        <Box name="Touch Detection" id="9" localization="8" tooltip="Sends an event when the tablet is touched&#x0A;&#x0A;V1.0.0&#x0A;" x="79" y="587">
                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False
        self.tabletService = None
        self.connectId = None

    def onUnload(self):
        if self.tabletService:
            self.tabletService.disableWebviewTouch()
            self.disconnectListener()
            self.isRunning = False

    def disconnectListener(self):
        if self.connectId:
            try:
                self.tabletService.onTouch.disconnect(self.connectId)
                self.connectId = None
            except Exception as e:
                self.logger.error(e)

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def  onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        self.tabletService = self._getTabletService()
        if self.tabletService:
            try:
                if not self.connectId:
                    self.tabletService.enableWebviewTouch()
                    if self.getParameter("Action") == "On touch move":
                        self.connectId = self.tabletService.onTouchMove.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch down":
                        self.connectId = self.tabletService.onTouchDown.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch up":
                        self.connectId = self.tabletService.onTouchUp.connect(self.touchCallback)
            except Exception as err:
                self.logger.warning("Error during subscribe: %s " % err)
        else:
            self.logger.info("No ALTabletService, can't play listen for touch.")

    def touchCallback(self, x, y):
        self.onTouched([x, y])

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onTouched" type="0" type_size="1" nature="2" inner="0" tooltip="Send [x,y] position for one touch" id="4" />
                            <Parameter name="Action" inherits_from_parent="0" content_type="3" value="On touch down" default_value="On touch move" custom_choice="0" tooltip="Type of touch you want on the tablet." id="5">
                                <Choice value="On touch move" />
                                <Choice value="On touch down" />
                                <Choice value="On touch up" />
                            </Parameter>
                        </Box>
                        <Box name="Random Eyes" id="12" localization="8" tooltip="The color of the eyes changes randomly.&#x0A;&#x0A;Note: It is a never ending box. You have to call the onStop input to stop it." x="416" y="559">
                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        self.bMustStop = True

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            rRandTime = random.uniform(0.0,2.0)
            self.leds.fadeRGB("FaceLeds", 256*random.randint(0,255) + 256*256*random.randint(0,255) + random.randint(0,255), rRandTime)
            time.sleep(random.uniform(0.0,3.0))
        self.bIsRunning = False
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                        </Box>
                        <Box name="Set Single LED" id="11" localization="8" tooltip="Set the intensity of a specific LED." x="533" y="563">
                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LED name"), self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.onReady() # activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                            <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                            <Parameter name="LED name" inherits_from_parent="0" content_type="3" value="LeftFaceLed1" default_value="LeftFaceLed1" custom_choice="0" tooltip="The name of LED which intensity is to set." id="4">
                                <Choice value="Brain0" />
                                <Choice value="Brain1" />
                                <Choice value="Brain2" />
                                <Choice value="Brain3" />
                                <Choice value="Brain4" />
                                <Choice value="Brain5" />
                                <Choice value="Brain6" />
                                <Choice value="Brain7" />
                                <Choice value="Brain8" />
                                <Choice value="Brain9" />
                                <Choice value="Brain10" />
                                <Choice value="Brain11" />
                                <Choice value="LeftEarLed1" />
                                <Choice value="LeftEarLed2" />
                                <Choice value="LeftEarLed3" />
                                <Choice value="LeftEarLed4" />
                                <Choice value="LeftEarLed5" />
                                <Choice value="LeftEarLed6" />
                                <Choice value="LeftEarLed7" />
                                <Choice value="LeftEarLed8" />
                                <Choice value="LeftEarLed9" />
                                <Choice value="LeftEarLed10" />
                                <Choice value="LeftFaceLed1" />
                                <Choice value="LeftFaceLed2" />
                                <Choice value="LeftFaceLed3" />
                                <Choice value="LeftFaceLed4" />
                                <Choice value="LeftFaceLed5" />
                                <Choice value="LeftFaceLed6" />
                                <Choice value="LeftFaceLed7" />
                                <Choice value="LeftFaceLed8" />
                                <Choice value="LeftFootLedsBlue" />
                                <Choice value="LeftFootLedsGreen" />
                                <Choice value="LeftFootLedsRed" />
                                <Choice value="RightEarLed1" />
                                <Choice value="RightEarLed2" />
                                <Choice value="RightEarLed3" />
                                <Choice value="RightEarLed4" />
                                <Choice value="RightEarLed5" />
                                <Choice value="RightEarLed6" />
                                <Choice value="RightEarLed7" />
                                <Choice value="RightEarLed8" />
                                <Choice value="RightEarLed9" />
                                <Choice value="RightEarLed10" />
                                <Choice value="RightFaceLed1" />
                                <Choice value="RightFaceLed2" />
                                <Choice value="RightFaceLed3" />
                                <Choice value="RightFaceLed4" />
                                <Choice value="RightFaceLed5" />
                                <Choice value="RightFaceLed6" />
                                <Choice value="RightFaceLed7" />
                                <Choice value="RightFaceLed8" />
                                <Choice value="RightFootLedsBlue" />
                                <Choice value="RightFootLedsGreen" />
                                <Choice value="RightFootLedsRed" />
                            </Parameter>
                            <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="60" tooltip="How much time to go to the max/min intensity in seconds." id="6" />
                        </Box>
                        <Box name="Single Eye LED" id="13" localization="8" tooltip="Set the color of one eye LED. Note that you must open the box to enter the color." x="654" y="562">
                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                <Choice value="Left" />
                                <Choice value="Right" />
                            </Parameter>
                            <Parameter name="Angle (degrees)" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s eye. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Eye   -&gt; (Front) &lt;-    Left Eye&#x0A;                     &#x0A;       90° .   . 45°                     45° .   . 90°&#x0A;  135° .         . 0°                   0° .         . 135°&#x0A;  180° .         . 315°            315° .         . 180°&#x0A;     225° .   . 270°                  270° .   . 225°" id="5">
                                <Choice value="0" />
                                <Choice value="45" />
                                <Choice value="90" />
                                <Choice value="135" />
                                <Choice value="180" />
                                <Choice value="225" />
                                <Choice value="270" />
                                <Choice value="315" />
                            </Parameter>
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="154" y="48">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <color>#ff0000</color>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                            </Box>
                                            <Box name="Eye LED" id="2" localization="8" tooltip="Set the intensity of one LED of robot&apos;s eyes." x="329" y="39">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        #~ for id in self.ids:
            #~ self.leds.stop(id)
        pass

    def onInput_color(self, p):
        """Fade the eye Led you have chosen to the color you have chosen with the duration you have chosen!"""
        aEyeNums = self.processAngle()
        if self.getParameter("Side") == "Left":
            nEyeNum = aEyeNums[0]
        else:
            nEyeNum = aEyeNums[1]
        sName = "FaceLed"+self.getParameter("Side")+str(nEyeNum)
        id = self.leds.post.fadeRGB(sName, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box

    def processAngle(self):
        n = int( self.getParameter("Angle (degrees)") )
        return [(45 - n) % 360 / 45] * 2]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="LED color." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Left" default_value="Left" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Angle (degrees)" inherits_from_parent="1" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="Angle (in degrees) where the LED is on the robot&apos;s eye. They are placed as&#x0A;following:&#x0A;&#x0A;         Right Eye   -&gt; (Front) &lt;-    Left Eye&#x0A;                     &#x0A;       90° .   . 45°                     45° .   . 90°&#x0A;  135° .         . 0°                   0° .         . 135°&#x0A;  180° .         . 315°            315° .         . 180°&#x0A;     225° .   . 270°                  270° .   . 225°" id="5">
                                                    <Choice value="0" />
                                                    <Choice value="45" />
                                                    <Choice value="90" />
                                                    <Choice value="135" />
                                                    <Choice value="180" />
                                                    <Choice value="225" />
                                                    <Choice value="270" />
                                                    <Choice value="315" />
                                                </Parameter>
                                                <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                            </Box>
                                            <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="16" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Take Picture" id="14" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="718" y="67">
                            <bitmap>media/images/box/interaction/picture.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="640 x 480" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                <Choice value="160 x 120" />
                                <Choice value="320 x 240" />
                                <Choice value="640 x 480" />
                                <Choice value="1280 x 960" />
                            </Parameter>
                            <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="image" default_value="image" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                            <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                <Choice value="Top" />
                                <Choice value="Bottom" />
                            </Parameter>
                        </Box>
                        <Box name="yeild" id="15" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="335" y="250">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.count = self.yield_test()

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info(str(self.count.next()))
        self.output('hi')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def yield_test(self):
        for i in range(10):
            yield i]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="Counter" id="16" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="333" y="366">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                        </Box>
                        <Box name="insane_head_shake" id="17" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="141" y="808">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="27">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="juliette">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-12.041" />
                                        <Key frame="3" value="-33.75" />
                                        <Key frame="5" value="-23.7305" />
                                        <Key frame="7" value="-33.75" />
                                        <Key frame="9" value="-23.7305" />
                                        <Key frame="11" value="-33.75" />
                                        <Key frame="13" value="-23.7305" />
                                        <Key frame="15" value="-33.75" />
                                        <Key frame="17" value="-23.7305" />
                                        <Key frame="19" value="-33.75" />
                                        <Key frame="21" value="-23.7305" />
                                        <Key frame="23" value="-33.75" />
                                        <Key frame="25" value="-23.7305" />
                                        <Key frame="27" value="-33.75" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="0" />
                                        <Key frame="3" value="6.15235" />
                                        <Key frame="5" value="6.15235" />
                                        <Key frame="7" value="6.15235" />
                                        <Key frame="9" value="6.15235" />
                                        <Key frame="11" value="6.15235" />
                                        <Key frame="13" value="6.15235" />
                                        <Key frame="15" value="6.15235" />
                                        <Key frame="17" value="6.15235" />
                                        <Key frame="19" value="6.15235" />
                                        <Key frame="21" value="6.15235" />
                                        <Key frame="23" value="6.15235" />
                                        <Key frame="25" value="6.15235" />
                                        <Key frame="27" value="6.15235" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-2.02149" />
                                        <Key frame="5" value="-1.9336" />
                                        <Key frame="9" value="-1.9336" />
                                        <Key frame="13" value="-1.9336" />
                                        <Key frame="17" value="-1.9336" />
                                        <Key frame="21" value="-1.9336" />
                                        <Key frame="25" value="-1.9336" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="0.175782" />
                                        <Key frame="5" value="0.175782" />
                                        <Key frame="9" value="0.175782" />
                                        <Key frame="13" value="0.175782" />
                                        <Key frame="17" value="0.175782" />
                                        <Key frame="21" value="0.175782" />
                                        <Key frame="25" value="0.175782" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="KneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-0.439454" />
                                        <Key frame="5" value="-0.439454" />
                                        <Key frame="9" value="-0.439454" />
                                        <Key frame="13" value="-0.439454" />
                                        <Key frame="17" value="-0.439454" />
                                        <Key frame="21" value="-0.439454" />
                                        <Key frame="25" value="-0.439454" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-29.7949" />
                                        <Key frame="5" value="-29.7949" />
                                        <Key frame="9" value="-29.7949" />
                                        <Key frame="13" value="-29.7949" />
                                        <Key frame="17" value="-29.7949" />
                                        <Key frame="21" value="-29.7949" />
                                        <Key frame="25" value="-29.7949" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-70.2246" />
                                        <Key frame="5" value="-70.2246" />
                                        <Key frame="9" value="-70.2246" />
                                        <Key frame="13" value="-70.2246" />
                                        <Key frame="17" value="-70.2246" />
                                        <Key frame="21" value="-70.2246" />
                                        <Key frame="25" value="-70.2246" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="1" value="0.595782" />
                                        <Key frame="5" value="0.595782" />
                                        <Key frame="9" value="0.595782" />
                                        <Key frame="13" value="0.595782" />
                                        <Key frame="17" value="0.595782" />
                                        <Key frame="21" value="0.595782" />
                                        <Key frame="25" value="0.595782" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="89.209" />
                                        <Key frame="5" value="89.209" />
                                        <Key frame="9" value="89.209" />
                                        <Key frame="13" value="89.209" />
                                        <Key frame="17" value="89.209" />
                                        <Key frame="21" value="89.209" />
                                        <Key frame="25" value="89.209" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="8.08593" />
                                        <Key frame="5" value="8.08593" />
                                        <Key frame="9" value="8.08593" />
                                        <Key frame="13" value="8.08593" />
                                        <Key frame="17" value="8.08593" />
                                        <Key frame="21" value="8.08593" />
                                        <Key frame="25" value="8.08593" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-0.793436" />
                                        <Key frame="5" value="-0.793436" />
                                        <Key frame="9" value="-0.793436" />
                                        <Key frame="13" value="-0.793436" />
                                        <Key frame="17" value="-0.793436" />
                                        <Key frame="21" value="-0.793436" />
                                        <Key frame="25" value="-0.793436" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="29.6191" />
                                        <Key frame="5" value="29.6191" />
                                        <Key frame="9" value="29.6191" />
                                        <Key frame="13" value="29.6191" />
                                        <Key frame="17" value="29.6191" />
                                        <Key frame="21" value="29.6191" />
                                        <Key frame="25" value="29.6191" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="70.5762" />
                                        <Key frame="5" value="70.5762" />
                                        <Key frame="9" value="70.5762" />
                                        <Key frame="13" value="70.5762" />
                                        <Key frame="17" value="70.5762" />
                                        <Key frame="21" value="70.5762" />
                                        <Key frame="25" value="70.5762" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="1" value="0.59051" />
                                        <Key frame="5" value="0.59051" />
                                        <Key frame="9" value="0.59051" />
                                        <Key frame="13" value="0.59051" />
                                        <Key frame="17" value="0.59051" />
                                        <Key frame="21" value="0.59051" />
                                        <Key frame="25" value="0.59051" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="89.2969" />
                                        <Key frame="5" value="89.2969" />
                                        <Key frame="9" value="89.2969" />
                                        <Key frame="13" value="89.2969" />
                                        <Key frame="17" value="89.2969" />
                                        <Key frame="21" value="89.2969" />
                                        <Key frame="25" value="89.2969" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-7.99804" />
                                        <Key frame="5" value="-7.99804" />
                                        <Key frame="9" value="-7.99804" />
                                        <Key frame="13" value="-7.99804" />
                                        <Key frame="17" value="-7.99804" />
                                        <Key frame="21" value="-7.99804" />
                                        <Key frame="25" value="-7.99804" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="0.261268" />
                                        <Key frame="5" value="0.261268" />
                                        <Key frame="9" value="0.261268" />
                                        <Key frame="13" value="0.261268" />
                                        <Key frame="17" value="0.261268" />
                                        <Key frame="21" value="0.261268" />
                                        <Key frame="25" value="0.261268" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="wobble_left_right" id="20" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="273" y="808">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="42">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="juliette">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="-33.5742" />
                                        <Key frame="6" value="-33.5742" />
                                        <Key frame="9" value="-33.5742" />
                                        <Key frame="12" value="-33.5742" />
                                        <Key frame="15" value="-33.5742" />
                                        <Key frame="18" value="-33.5742" />
                                        <Key frame="21" value="-33.5742" />
                                        <Key frame="24" value="-33.5742" />
                                        <Key frame="27" value="-33.5742" />
                                        <Key frame="30" value="-33.5742" />
                                        <Key frame="33" value="-33.5742" />
                                        <Key frame="36" value="-33.5742" />
                                        <Key frame="39" value="-33.5742" />
                                        <Key frame="42" value="-33.5742" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="6.06446" />
                                        <Key frame="6" value="6.06446" />
                                        <Key frame="9" value="6.06446" />
                                        <Key frame="12" value="6.06446" />
                                        <Key frame="15" value="6.06446" />
                                        <Key frame="18" value="6.06446" />
                                        <Key frame="21" value="6.06446" />
                                        <Key frame="24" value="6.06446" />
                                        <Key frame="27" value="6.06446" />
                                        <Key frame="30" value="6.06446" />
                                        <Key frame="33" value="6.06446" />
                                        <Key frame="36" value="6.06446" />
                                        <Key frame="39" value="6.06446" />
                                        <Key frame="42" value="6.06446" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="-22.4121" />
                                        <Key frame="6" value="-22.4121" />
                                        <Key frame="9" value="-22.4121" />
                                        <Key frame="12" value="-22.4121" />
                                        <Key frame="15" value="-22.4121" />
                                        <Key frame="18" value="-22.4121" />
                                        <Key frame="21" value="-22.4121" />
                                        <Key frame="24" value="-22.4121" />
                                        <Key frame="27" value="-22.4121" />
                                        <Key frame="30" value="-22.4121" />
                                        <Key frame="33" value="-22.4121" />
                                        <Key frame="36" value="-22.4121" />
                                        <Key frame="39" value="-22.4121" />
                                        <Key frame="42" value="-22.4121" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="24.9609" />
                                        <Key frame="6" value="-24.7852" />
                                        <Key frame="9" value="24.9609" />
                                        <Key frame="12" value="-24.7852" />
                                        <Key frame="15" value="24.9609" />
                                        <Key frame="18" value="-24.7852" />
                                        <Key frame="21" value="24.9609" />
                                        <Key frame="24" value="-24.7852" />
                                        <Key frame="27" value="24.9609" />
                                        <Key frame="30" value="-24.7852" />
                                        <Key frame="33" value="24.9609" />
                                        <Key frame="36" value="-24.7852" />
                                        <Key frame="39" value="24.9609" />
                                        <Key frame="42" value="-24.7852" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="KneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="4.39453" />
                                        <Key frame="6" value="4.39453" />
                                        <Key frame="9" value="4.39453" />
                                        <Key frame="12" value="4.39453" />
                                        <Key frame="15" value="4.39453" />
                                        <Key frame="18" value="4.39453" />
                                        <Key frame="21" value="4.39453" />
                                        <Key frame="24" value="4.39453" />
                                        <Key frame="27" value="4.39453" />
                                        <Key frame="30" value="4.39453" />
                                        <Key frame="33" value="4.39453" />
                                        <Key frame="36" value="4.39453" />
                                        <Key frame="39" value="4.39453" />
                                        <Key frame="42" value="4.39453" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="-0.5" />
                                        <Key frame="6" value="-0.5" />
                                        <Key frame="9" value="-0.5" />
                                        <Key frame="12" value="-0.5" />
                                        <Key frame="15" value="-0.5" />
                                        <Key frame="18" value="-0.5" />
                                        <Key frame="21" value="-0.5" />
                                        <Key frame="24" value="-0.5" />
                                        <Key frame="27" value="-0.5" />
                                        <Key frame="30" value="-0.5" />
                                        <Key frame="33" value="-0.5" />
                                        <Key frame="36" value="-0.5" />
                                        <Key frame="39" value="-0.5" />
                                        <Key frame="42" value="-0.5" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="-29.2676" />
                                        <Key frame="6" value="-29.2676" />
                                        <Key frame="9" value="-29.2676" />
                                        <Key frame="12" value="-29.2676" />
                                        <Key frame="15" value="-29.2676" />
                                        <Key frame="18" value="-29.2676" />
                                        <Key frame="21" value="-29.2676" />
                                        <Key frame="24" value="-29.2676" />
                                        <Key frame="27" value="-29.2676" />
                                        <Key frame="30" value="-29.2676" />
                                        <Key frame="33" value="-29.2676" />
                                        <Key frame="36" value="-29.2676" />
                                        <Key frame="39" value="-29.2676" />
                                        <Key frame="42" value="-29.2676" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="3" value="0.484183" />
                                        <Key frame="6" value="0.484183" />
                                        <Key frame="9" value="0.484183" />
                                        <Key frame="12" value="0.484183" />
                                        <Key frame="15" value="0.484183" />
                                        <Key frame="18" value="0.484183" />
                                        <Key frame="21" value="0.484183" />
                                        <Key frame="24" value="0.484183" />
                                        <Key frame="27" value="0.484183" />
                                        <Key frame="30" value="0.484183" />
                                        <Key frame="33" value="0.484183" />
                                        <Key frame="36" value="0.484183" />
                                        <Key frame="39" value="0.484183" />
                                        <Key frame="42" value="0.484183" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="63.5449" />
                                        <Key frame="6" value="63.5449" />
                                        <Key frame="9" value="63.5449" />
                                        <Key frame="12" value="63.5449" />
                                        <Key frame="15" value="63.5449" />
                                        <Key frame="18" value="63.5449" />
                                        <Key frame="21" value="63.5449" />
                                        <Key frame="24" value="63.5449" />
                                        <Key frame="27" value="63.5449" />
                                        <Key frame="30" value="63.5449" />
                                        <Key frame="33" value="63.5449" />
                                        <Key frame="36" value="63.5449" />
                                        <Key frame="39" value="63.5449" />
                                        <Key frame="42" value="63.5449" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="8.78906" />
                                        <Key frame="6" value="0.703127" />
                                        <Key frame="9" value="8.78906" />
                                        <Key frame="12" value="0.703127" />
                                        <Key frame="15" value="8.78906" />
                                        <Key frame="18" value="0.703127" />
                                        <Key frame="21" value="8.78906" />
                                        <Key frame="24" value="0.703127" />
                                        <Key frame="27" value="8.78906" />
                                        <Key frame="30" value="0.703127" />
                                        <Key frame="33" value="8.78906" />
                                        <Key frame="36" value="0.703127" />
                                        <Key frame="39" value="8.78906" />
                                        <Key frame="42" value="0.703127" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="-59.1535" />
                                        <Key frame="6" value="-59.1535" />
                                        <Key frame="9" value="-59.1535" />
                                        <Key frame="12" value="-59.1535" />
                                        <Key frame="15" value="-59.1535" />
                                        <Key frame="18" value="-59.1535" />
                                        <Key frame="21" value="-59.1535" />
                                        <Key frame="24" value="-59.1535" />
                                        <Key frame="27" value="-59.1535" />
                                        <Key frame="30" value="-59.1535" />
                                        <Key frame="33" value="-59.1535" />
                                        <Key frame="36" value="-59.1535" />
                                        <Key frame="39" value="-59.1535" />
                                        <Key frame="42" value="-59.1535" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="0.5" />
                                        <Key frame="6" value="0.5" />
                                        <Key frame="9" value="0.5" />
                                        <Key frame="12" value="0.5" />
                                        <Key frame="15" value="0.5" />
                                        <Key frame="18" value="0.5" />
                                        <Key frame="21" value="0.5" />
                                        <Key frame="24" value="0.5" />
                                        <Key frame="27" value="0.5" />
                                        <Key frame="30" value="0.5" />
                                        <Key frame="33" value="0.5" />
                                        <Key frame="36" value="0.5" />
                                        <Key frame="39" value="0.5" />
                                        <Key frame="42" value="0.5" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="70.6641" />
                                        <Key frame="6" value="70.6641" />
                                        <Key frame="9" value="70.6641" />
                                        <Key frame="12" value="70.6641" />
                                        <Key frame="15" value="70.6641" />
                                        <Key frame="18" value="70.6641" />
                                        <Key frame="21" value="70.6641" />
                                        <Key frame="24" value="70.6641" />
                                        <Key frame="27" value="70.6641" />
                                        <Key frame="30" value="70.6641" />
                                        <Key frame="33" value="70.6641" />
                                        <Key frame="36" value="70.6641" />
                                        <Key frame="39" value="70.6641" />
                                        <Key frame="42" value="70.6641" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="3" value="0.551845" />
                                        <Key frame="6" value="0.551845" />
                                        <Key frame="9" value="0.551845" />
                                        <Key frame="12" value="0.551845" />
                                        <Key frame="15" value="0.551845" />
                                        <Key frame="18" value="0.551845" />
                                        <Key frame="21" value="0.551845" />
                                        <Key frame="24" value="0.551845" />
                                        <Key frame="27" value="0.551845" />
                                        <Key frame="30" value="0.551845" />
                                        <Key frame="33" value="0.551845" />
                                        <Key frame="36" value="0.551845" />
                                        <Key frame="39" value="0.551845" />
                                        <Key frame="42" value="0.551845" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="60.2051" />
                                        <Key frame="6" value="60.2051" />
                                        <Key frame="9" value="60.2051" />
                                        <Key frame="12" value="60.2051" />
                                        <Key frame="15" value="60.2051" />
                                        <Key frame="18" value="60.2051" />
                                        <Key frame="21" value="60.2051" />
                                        <Key frame="24" value="60.2051" />
                                        <Key frame="27" value="60.2051" />
                                        <Key frame="30" value="60.2051" />
                                        <Key frame="33" value="60.2051" />
                                        <Key frame="36" value="60.2051" />
                                        <Key frame="39" value="60.2051" />
                                        <Key frame="42" value="60.2051" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="-0.615236" />
                                        <Key frame="6" value="-9.84375" />
                                        <Key frame="9" value="-0.615236" />
                                        <Key frame="12" value="-9.84375" />
                                        <Key frame="15" value="-0.615236" />
                                        <Key frame="18" value="-9.84375" />
                                        <Key frame="21" value="-0.615236" />
                                        <Key frame="24" value="-9.84375" />
                                        <Key frame="27" value="-0.615236" />
                                        <Key frame="30" value="-9.84375" />
                                        <Key frame="33" value="-0.615236" />
                                        <Key frame="36" value="-9.84375" />
                                        <Key frame="39" value="-0.615236" />
                                        <Key frame="42" value="-9.84375" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="3" value="-12.0436" />
                                        <Key frame="6" value="-12.0436" />
                                        <Key frame="9" value="-12.0436" />
                                        <Key frame="12" value="-12.0436" />
                                        <Key frame="15" value="-12.0436" />
                                        <Key frame="18" value="-12.0436" />
                                        <Key frame="21" value="-12.0436" />
                                        <Key frame="24" value="-12.0436" />
                                        <Key frame="27" value="-12.0436" />
                                        <Key frame="30" value="-12.0436" />
                                        <Key frame="33" value="-12.0436" />
                                        <Key frame="36" value="-12.0436" />
                                        <Key frame="39" value="-12.0436" />
                                        <Key frame="42" value="-12.0436" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="wobble_back_forth" id="14" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="136" y="938">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="89">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="juliette">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-11.3974" />
                                        <Key frame="5" value="-11.3974" />
                                        <Key frame="9" value="-11.3974" />
                                        <Key frame="13" value="-11.3974" />
                                        <Key frame="17" value="-11.3974" />
                                        <Key frame="21" value="-11.3974" />
                                        <Key frame="25" value="-11.3974" />
                                        <Key frame="29" value="-11.3974" />
                                        <Key frame="33" value="-11.3974" />
                                        <Key frame="37" value="-11.3974" />
                                        <Key frame="41" value="-11.3974" />
                                        <Key frame="45" value="-11.3974" />
                                        <Key frame="49" value="-11.3974" />
                                        <Key frame="53" value="-11.3974" />
                                        <Key frame="57" value="-11.3974" />
                                        <Key frame="61" value="-11.3974" />
                                        <Key frame="65" value="-11.3974" />
                                        <Key frame="69" value="-11.3974" />
                                        <Key frame="73" value="-11.3974" />
                                        <Key frame="77" value="-11.3974" />
                                        <Key frame="81" value="-11.3974" />
                                        <Key frame="85" value="-11.3974" />
                                        <Key frame="89" value="-11.3974" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="0.292324" />
                                        <Key frame="5" value="0.292324" />
                                        <Key frame="9" value="0.292324" />
                                        <Key frame="13" value="0.292324" />
                                        <Key frame="17" value="0.292324" />
                                        <Key frame="21" value="0.292324" />
                                        <Key frame="25" value="0.292324" />
                                        <Key frame="29" value="0.292324" />
                                        <Key frame="33" value="0.292324" />
                                        <Key frame="37" value="0.292324" />
                                        <Key frame="41" value="0.292324" />
                                        <Key frame="45" value="0.292324" />
                                        <Key frame="49" value="0.292324" />
                                        <Key frame="53" value="0.292324" />
                                        <Key frame="57" value="0.292324" />
                                        <Key frame="61" value="0.292324" />
                                        <Key frame="65" value="0.292324" />
                                        <Key frame="69" value="0.292324" />
                                        <Key frame="73" value="0.292324" />
                                        <Key frame="77" value="0.292324" />
                                        <Key frame="81" value="0.292324" />
                                        <Key frame="85" value="0.292324" />
                                        <Key frame="89" value="0.292324" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-1.75826" />
                                        <Key frame="5" value="10.9765" />
                                        <Key frame="9" value="-19.3075" />
                                        <Key frame="13" value="10.9765" />
                                        <Key frame="17" value="-19.3075" />
                                        <Key frame="21" value="10.9765" />
                                        <Key frame="25" value="-19.3075" />
                                        <Key frame="29" value="10.9765" />
                                        <Key frame="33" value="-19.3075" />
                                        <Key frame="37" value="10.9765" />
                                        <Key frame="41" value="-19.3075" />
                                        <Key frame="45" value="10.9765" />
                                        <Key frame="49" value="-19.3075" />
                                        <Key frame="53" value="10.9765" />
                                        <Key frame="57" value="-19.3075" />
                                        <Key frame="61" value="10.9765" />
                                        <Key frame="65" value="-19.3075" />
                                        <Key frame="69" value="10.9765" />
                                        <Key frame="73" value="-19.3075" />
                                        <Key frame="77" value="10.9765" />
                                        <Key frame="81" value="-19.3075" />
                                        <Key frame="85" value="10.9765" />
                                        <Key frame="89" value="-19.3075" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-0.100819" />
                                        <Key frame="5" value="-0.100819" />
                                        <Key frame="9" value="-0.100819" />
                                        <Key frame="13" value="-0.100819" />
                                        <Key frame="17" value="-0.100819" />
                                        <Key frame="21" value="-0.100819" />
                                        <Key frame="25" value="-0.100819" />
                                        <Key frame="29" value="-0.100819" />
                                        <Key frame="33" value="-0.100819" />
                                        <Key frame="37" value="-0.100819" />
                                        <Key frame="41" value="-0.100819" />
                                        <Key frame="45" value="-0.100819" />
                                        <Key frame="49" value="-0.100819" />
                                        <Key frame="53" value="-0.100819" />
                                        <Key frame="57" value="-0.100819" />
                                        <Key frame="61" value="-0.100819" />
                                        <Key frame="65" value="-0.100819" />
                                        <Key frame="69" value="-0.100819" />
                                        <Key frame="73" value="-0.100819" />
                                        <Key frame="77" value="-0.100819" />
                                        <Key frame="81" value="-0.100819" />
                                        <Key frame="85" value="-0.100819" />
                                        <Key frame="89" value="-0.100819" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="KneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-0.344799" />
                                        <Key frame="5" value="-8.60898" />
                                        <Key frame="9" value="7.69764" />
                                        <Key frame="13" value="-8.60898" />
                                        <Key frame="17" value="7.69764" />
                                        <Key frame="21" value="-8.60898" />
                                        <Key frame="25" value="7.69764" />
                                        <Key frame="29" value="-8.60898" />
                                        <Key frame="33" value="7.69764" />
                                        <Key frame="37" value="-8.60898" />
                                        <Key frame="41" value="7.69764" />
                                        <Key frame="45" value="-8.60898" />
                                        <Key frame="49" value="7.69764" />
                                        <Key frame="53" value="-8.60898" />
                                        <Key frame="57" value="7.69764" />
                                        <Key frame="61" value="-8.60898" />
                                        <Key frame="65" value="7.69764" />
                                        <Key frame="69" value="-8.60898" />
                                        <Key frame="73" value="7.69764" />
                                        <Key frame="77" value="-8.60898" />
                                        <Key frame="81" value="7.69764" />
                                        <Key frame="85" value="-8.60898" />
                                        <Key frame="89" value="7.69764" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-29.6646" />
                                        <Key frame="5" value="-29.6646" />
                                        <Key frame="9" value="-29.6646" />
                                        <Key frame="13" value="-29.6646" />
                                        <Key frame="17" value="-29.6646" />
                                        <Key frame="21" value="-29.6646" />
                                        <Key frame="25" value="-29.6646" />
                                        <Key frame="29" value="-29.6646" />
                                        <Key frame="33" value="-29.6646" />
                                        <Key frame="37" value="-29.6646" />
                                        <Key frame="41" value="-29.6646" />
                                        <Key frame="45" value="-29.6646" />
                                        <Key frame="49" value="-29.6646" />
                                        <Key frame="53" value="-29.6646" />
                                        <Key frame="57" value="-29.6646" />
                                        <Key frame="61" value="-29.6646" />
                                        <Key frame="65" value="-29.6646" />
                                        <Key frame="69" value="-29.6646" />
                                        <Key frame="73" value="-29.6646" />
                                        <Key frame="77" value="-29.6646" />
                                        <Key frame="81" value="-29.6646" />
                                        <Key frame="85" value="-29.6646" />
                                        <Key frame="89" value="-29.6646" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-70.337" />
                                        <Key frame="5" value="-70.337" />
                                        <Key frame="9" value="-70.337" />
                                        <Key frame="13" value="-70.337" />
                                        <Key frame="17" value="-70.337" />
                                        <Key frame="21" value="-70.337" />
                                        <Key frame="25" value="-70.337" />
                                        <Key frame="29" value="-70.337" />
                                        <Key frame="33" value="-70.337" />
                                        <Key frame="37" value="-70.337" />
                                        <Key frame="41" value="-70.337" />
                                        <Key frame="45" value="-70.337" />
                                        <Key frame="49" value="-70.337" />
                                        <Key frame="53" value="-70.337" />
                                        <Key frame="57" value="-70.337" />
                                        <Key frame="61" value="-70.337" />
                                        <Key frame="65" value="-70.337" />
                                        <Key frame="69" value="-70.337" />
                                        <Key frame="73" value="-70.337" />
                                        <Key frame="77" value="-70.337" />
                                        <Key frame="81" value="-70.337" />
                                        <Key frame="85" value="-70.337" />
                                        <Key frame="89" value="-70.337" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="1" value="0.590575" />
                                        <Key frame="5" value="0.590575" />
                                        <Key frame="9" value="0.590575" />
                                        <Key frame="13" value="0.590575" />
                                        <Key frame="17" value="0.590575" />
                                        <Key frame="21" value="0.590575" />
                                        <Key frame="25" value="0.590575" />
                                        <Key frame="29" value="0.590575" />
                                        <Key frame="33" value="0.590575" />
                                        <Key frame="37" value="0.590575" />
                                        <Key frame="41" value="0.590575" />
                                        <Key frame="45" value="0.590575" />
                                        <Key frame="49" value="0.590575" />
                                        <Key frame="53" value="0.590575" />
                                        <Key frame="57" value="0.590575" />
                                        <Key frame="61" value="0.590575" />
                                        <Key frame="65" value="0.590575" />
                                        <Key frame="69" value="0.590575" />
                                        <Key frame="73" value="0.590575" />
                                        <Key frame="77" value="0.590575" />
                                        <Key frame="81" value="0.590575" />
                                        <Key frame="85" value="0.590575" />
                                        <Key frame="89" value="0.590575" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="89.6671" />
                                        <Key frame="5" value="89.6671" />
                                        <Key frame="9" value="89.6671" />
                                        <Key frame="13" value="89.6671" />
                                        <Key frame="17" value="89.6671" />
                                        <Key frame="21" value="89.6671" />
                                        <Key frame="25" value="89.6671" />
                                        <Key frame="29" value="89.6671" />
                                        <Key frame="33" value="89.6671" />
                                        <Key frame="37" value="89.6671" />
                                        <Key frame="41" value="89.6671" />
                                        <Key frame="45" value="89.6671" />
                                        <Key frame="49" value="89.6671" />
                                        <Key frame="53" value="89.6671" />
                                        <Key frame="57" value="89.6671" />
                                        <Key frame="61" value="89.6671" />
                                        <Key frame="65" value="89.6671" />
                                        <Key frame="69" value="89.6671" />
                                        <Key frame="73" value="89.6671" />
                                        <Key frame="77" value="89.6671" />
                                        <Key frame="81" value="89.6671" />
                                        <Key frame="85" value="89.6671" />
                                        <Key frame="89" value="89.6671" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="7.74919" />
                                        <Key frame="5" value="7.74919" />
                                        <Key frame="9" value="8.35797" />
                                        <Key frame="13" value="7.74919" />
                                        <Key frame="17" value="8.35797" />
                                        <Key frame="21" value="7.74919" />
                                        <Key frame="25" value="8.35797" />
                                        <Key frame="29" value="7.74919" />
                                        <Key frame="33" value="8.35797" />
                                        <Key frame="37" value="7.74919" />
                                        <Key frame="41" value="8.35797" />
                                        <Key frame="45" value="7.74919" />
                                        <Key frame="49" value="8.35797" />
                                        <Key frame="53" value="7.74919" />
                                        <Key frame="57" value="8.35797" />
                                        <Key frame="61" value="7.74919" />
                                        <Key frame="65" value="8.35797" />
                                        <Key frame="69" value="7.74919" />
                                        <Key frame="73" value="8.35797" />
                                        <Key frame="77" value="7.74919" />
                                        <Key frame="81" value="8.35797" />
                                        <Key frame="85" value="7.74919" />
                                        <Key frame="89" value="8.35797" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-0.50555" />
                                        <Key frame="5" value="-0.50555" />
                                        <Key frame="9" value="-0.50555" />
                                        <Key frame="13" value="-0.50555" />
                                        <Key frame="17" value="-0.50555" />
                                        <Key frame="21" value="-0.50555" />
                                        <Key frame="25" value="-0.50555" />
                                        <Key frame="29" value="-0.50555" />
                                        <Key frame="33" value="-0.50555" />
                                        <Key frame="37" value="-0.50555" />
                                        <Key frame="41" value="-0.50555" />
                                        <Key frame="45" value="-0.50555" />
                                        <Key frame="49" value="-0.50555" />
                                        <Key frame="53" value="-0.50555" />
                                        <Key frame="57" value="-0.50555" />
                                        <Key frame="61" value="-0.50555" />
                                        <Key frame="65" value="-0.50555" />
                                        <Key frame="69" value="-0.50555" />
                                        <Key frame="73" value="-0.50555" />
                                        <Key frame="77" value="-0.50555" />
                                        <Key frame="81" value="-0.50555" />
                                        <Key frame="85" value="-0.50555" />
                                        <Key frame="89" value="-0.50555" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="29.643" />
                                        <Key frame="5" value="29.643" />
                                        <Key frame="9" value="29.643" />
                                        <Key frame="13" value="29.643" />
                                        <Key frame="17" value="29.643" />
                                        <Key frame="21" value="29.643" />
                                        <Key frame="25" value="29.643" />
                                        <Key frame="29" value="29.643" />
                                        <Key frame="33" value="29.643" />
                                        <Key frame="37" value="29.643" />
                                        <Key frame="41" value="29.643" />
                                        <Key frame="45" value="29.643" />
                                        <Key frame="49" value="29.643" />
                                        <Key frame="53" value="29.643" />
                                        <Key frame="57" value="29.643" />
                                        <Key frame="61" value="29.643" />
                                        <Key frame="65" value="29.643" />
                                        <Key frame="69" value="29.643" />
                                        <Key frame="73" value="29.643" />
                                        <Key frame="77" value="29.643" />
                                        <Key frame="81" value="29.643" />
                                        <Key frame="85" value="29.643" />
                                        <Key frame="89" value="29.643" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="70.5381" />
                                        <Key frame="5" value="70.5381" />
                                        <Key frame="9" value="70.5381" />
                                        <Key frame="13" value="70.5381" />
                                        <Key frame="17" value="70.5381" />
                                        <Key frame="21" value="70.5381" />
                                        <Key frame="25" value="70.5381" />
                                        <Key frame="29" value="70.5381" />
                                        <Key frame="33" value="70.5381" />
                                        <Key frame="37" value="70.5381" />
                                        <Key frame="41" value="70.5381" />
                                        <Key frame="45" value="70.5381" />
                                        <Key frame="49" value="70.5381" />
                                        <Key frame="53" value="70.5381" />
                                        <Key frame="57" value="70.5381" />
                                        <Key frame="61" value="70.5381" />
                                        <Key frame="65" value="70.5381" />
                                        <Key frame="69" value="70.5381" />
                                        <Key frame="73" value="70.5381" />
                                        <Key frame="77" value="70.5381" />
                                        <Key frame="81" value="70.5381" />
                                        <Key frame="85" value="70.5381" />
                                        <Key frame="89" value="70.5381" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="1" value="0.594703" />
                                        <Key frame="5" value="0.594703" />
                                        <Key frame="9" value="0.594703" />
                                        <Key frame="13" value="0.594703" />
                                        <Key frame="17" value="0.594703" />
                                        <Key frame="21" value="0.594703" />
                                        <Key frame="25" value="0.594703" />
                                        <Key frame="29" value="0.594703" />
                                        <Key frame="33" value="0.594703" />
                                        <Key frame="37" value="0.594703" />
                                        <Key frame="41" value="0.594703" />
                                        <Key frame="45" value="0.594703" />
                                        <Key frame="49" value="0.594703" />
                                        <Key frame="53" value="0.594703" />
                                        <Key frame="57" value="0.594703" />
                                        <Key frame="61" value="0.594703" />
                                        <Key frame="65" value="0.594703" />
                                        <Key frame="69" value="0.594703" />
                                        <Key frame="73" value="0.594703" />
                                        <Key frame="77" value="0.594703" />
                                        <Key frame="81" value="0.594703" />
                                        <Key frame="85" value="0.594703" />
                                        <Key frame="89" value="0.594703" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="89.4894" />
                                        <Key frame="5" value="89.4894" />
                                        <Key frame="9" value="89.4894" />
                                        <Key frame="13" value="89.4894" />
                                        <Key frame="17" value="89.4894" />
                                        <Key frame="21" value="89.4894" />
                                        <Key frame="25" value="89.4894" />
                                        <Key frame="29" value="89.4894" />
                                        <Key frame="33" value="89.4894" />
                                        <Key frame="37" value="89.4894" />
                                        <Key frame="41" value="89.4894" />
                                        <Key frame="45" value="89.4894" />
                                        <Key frame="49" value="89.4894" />
                                        <Key frame="53" value="89.4894" />
                                        <Key frame="57" value="89.4894" />
                                        <Key frame="61" value="89.4894" />
                                        <Key frame="65" value="89.4894" />
                                        <Key frame="69" value="89.4894" />
                                        <Key frame="73" value="89.4894" />
                                        <Key frame="77" value="89.4894" />
                                        <Key frame="81" value="89.4894" />
                                        <Key frame="85" value="89.4894" />
                                        <Key frame="89" value="89.4894" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-7.80307" />
                                        <Key frame="5" value="-7.80307" />
                                        <Key frame="9" value="-8.39798" />
                                        <Key frame="13" value="-7.80307" />
                                        <Key frame="17" value="-8.39798" />
                                        <Key frame="21" value="-7.80307" />
                                        <Key frame="25" value="-8.39798" />
                                        <Key frame="29" value="-7.80307" />
                                        <Key frame="33" value="-8.39798" />
                                        <Key frame="37" value="-7.80307" />
                                        <Key frame="41" value="-8.39798" />
                                        <Key frame="45" value="-7.80307" />
                                        <Key frame="49" value="-8.39798" />
                                        <Key frame="53" value="-7.80307" />
                                        <Key frame="57" value="-8.39798" />
                                        <Key frame="61" value="-7.80307" />
                                        <Key frame="65" value="-8.39798" />
                                        <Key frame="69" value="-7.80307" />
                                        <Key frame="73" value="-8.39798" />
                                        <Key frame="77" value="-7.80307" />
                                        <Key frame="81" value="-8.39798" />
                                        <Key frame="85" value="-7.80307" />
                                        <Key frame="89" value="-8.39798" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="1" value="-0.236098" />
                                        <Key frame="5" value="-0.236098" />
                                        <Key frame="9" value="-0.236098" />
                                        <Key frame="13" value="-0.236098" />
                                        <Key frame="17" value="-0.236098" />
                                        <Key frame="21" value="-0.236098" />
                                        <Key frame="25" value="-0.236098" />
                                        <Key frame="29" value="-0.236098" />
                                        <Key frame="33" value="-0.236098" />
                                        <Key frame="37" value="-0.236098" />
                                        <Key frame="41" value="-0.236098" />
                                        <Key frame="45" value="-0.236098" />
                                        <Key frame="49" value="-0.236098" />
                                        <Key frame="53" value="-0.236098" />
                                        <Key frame="57" value="-0.236098" />
                                        <Key frame="61" value="-0.236098" />
                                        <Key frame="65" value="-0.236098" />
                                        <Key frame="69" value="-0.236098" />
                                        <Key frame="73" value="-0.236098" />
                                        <Key frame="77" value="-0.236098" />
                                        <Key frame="81" value="-0.236098" />
                                        <Key frame="85" value="-0.236098" />
                                        <Key frame="89" value="-0.236098" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="rotate_900" id="18" localization="8" tooltip="Move along a trajectory given by an attached .pmt file.&#x0A;&#x0A;V1.0.0&#x0A;" x="274" y="937">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.move(0., 0., 0.)

    def onInput_onStart(self):
        relativePath = self.getParameter("Planar Move Trajectory")
        if len(relativePath) == 0:
            self.failure()
            return

        fm = ALProxy("ALFrameManager")
        behaviorPath = fm.getBehaviorPath(self.behaviorId)
        trajectoryPath = behaviorPath + relativePath

        trajectoryData = str()
        with open(trajectoryPath, 'r') as trajectoryFile:
            trajectoryData = trajectoryFile.read()
        trajectory = eval(trajectoryData)

        if trajectory[0] != "Composed": # dealing with trajectories with radius
            trajectory = trajectory[0]

        result = self.navigation.moveAlong(trajectory)
        if (result):
            self.success()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was correctly executed." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was stopped to avoid collisions." id="5" />
                            <Parameter name="Planar Move Trajectory" inherits_from_parent="0" content_type="4" value="/../rotate_00.pmt" default_value="" tooltip="" id="6" />
                        </Box>
                        <Box name="Show Image" id="21" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="424" y="594">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="http://images4.fanpop.com/image/photos/16100000/The-Master-horror-movies-16124656-633-481.jpg" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
                        <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" />
                        <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="4" />
                        <Link inputowner="16" indexofinput="2" outputowner="15" indexofoutput="5" />
                        <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
